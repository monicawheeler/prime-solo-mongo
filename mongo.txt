// 0. Create a collection named orders.
> db.createCollection('orders')
// Also did: 
> var orders = db.orders

// 1. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
> orders.insert({ orderDate: new Date('2017-02-03'), orderTotal: 24, lineItems: [{unitPrice: 12, quantity: 2, productName: 'book'}] })
> orders.insert({ orderDate: new Date('2017-04-04'), orderTotal: 50, lineItems: [{unitPrice: 25, quantity: 2, productName: 'cup'}] })
> orders.insert({ orderDate: new Date('2017-01-02'), orderTotal: 100, lineItems: [{unitPrice: 50, quantity: 2, productName: 'glasses'}] })

// 2. Find all orders and make them look pretty.
> orders.find().pretty()

// 3. Find all orders with an orderDate that is after 1/31/2017.
> orders.find({orderDate: { $gt: new ISODate("2017-01-31T00:00:00Z") }})

// 4. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
> orders.update({orderDate: ISODate("2017-02-03T00:00:00Z")}, {$set: {orderTotal: 63}})

// 5. Add another lineItem to the order from 4/4/2017
** This adds an additional object 
> orders.update({orderDate: ISODate("2017-04-04T00:00:00Z")},{$push:{lineItems: {"category": "home"}}})

// 6. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
> orders.update({ orderDate: new Date('2017-01-02')}, {$set: {lineItems: [{productName: "transistor radio", quantity: 2, unitPrice: 38}] }})

// 7. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch
order.find({ lineItems: { $elemMatch: { quantity: {$gt: 2, $lt: 10}}}})